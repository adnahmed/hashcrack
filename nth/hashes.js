// Transcrypt'ed from Python, 2023-06-23 19:21:08
var re = {};
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import {dataclass} from './dataclasses.js';
import * as __module_re__ from './re.js';
__nest__ (re, '', __module_re__);
var __name__ = 'hashes';
export var Prototype =  __class__ ('Prototype', [object], {
	__module__: __name__,
	_fields: ['regex', 'modes'],
	get __init__ () {return __get__ (this, function (self, regex, modes) {
		self.regex = regex.regex;
		self.modes = regex.modes;
	});},
	get __repr__ () {return __get__ (this, function (self) {
		return 'Prototype(regex={}, modes={})'.format (self._repr_format (self.regex), self.modes);
	});},
	get _repr_format () {return function (obj) {
		if (isinstance (obj, str)) {
			return "'{}'".format (obj);
		}
		return repr (obj);
	};},
	get __dict__ () {return __get__ (this, function (self) {
		return dict ({'regex': self.regex, 'modes': self.modes});
	});}
});
export var HashInfo =  __class__ ('HashInfo', [object], {
	__module__: __name__,
	get __init__ () {return __get__ (this, function (self) {
		var kwargs = dict ();
		if (arguments.length) {
			var __ilastarg0__ = arguments.length - 1;
			if (arguments [__ilastarg0__] && arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
				var __allkwargs0__ = arguments [__ilastarg0__--];
				for (var __attrib0__ in __allkwargs0__) {
					switch (__attrib0__) {
						case 'self': var self = __allkwargs0__ [__attrib0__]; break;
						default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
					}
				}
				delete kwargs.__kwargtrans__;
			}
			var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
		}
		else {
			var args = tuple ();
		}
		let names = self.__initfields__.values ();
		for (let arg of args) {
		    self [names.next () .value] = arg;
		}
		for (let name of kwargs.py_keys ()) {
		    self [name] = kwargs [name];
		}
	});},
	get __repr__ () {return __get__ (this, function (self) {
		let names = self.__reprfields__.values ();
		let fields = [];
		for (let name of names) {{
		    fields.push (name + '=' + repr (self [name]));
		}}
		return  self.__name__ + '(' + ', '.join (fields) + ')'
	});},
	get __eq__ () {return __get__ (this, function (self, other) {
		let names = self.__comparefields__.values ();
		let selfFields = [];
		let otherFields = [];
		for (let name of names) {
		    selfFields.push (self [name]);
		    otherFields.push (other [name]);
		}
		return list (selfFields).__eq__(list (otherFields));
	});},
	get __ne__ () {return __get__ (this, function (self, other) {
		let names = self.__comparefields__.values ();
		let selfFields = [];
		let otherFields = [];
		for (let name of names) {
		    selfFields.push (self [name]);
		    otherFields.push (other [name]);
		}
		return list (selfFields).__ne__(list (otherFields));
	});},
	get __lt__ () {return __get__ (this, function (self, other) {
		let names = self.__comparefields__.values ();
		let selfFields = [];
		let otherFields = [];
		for (let name of names) {
		    selfFields.push (self [name]);
		    otherFields.push (other [name]);
		}
		return list (selfFields).__lt__(list (otherFields));
	});},
	get __le__ () {return __get__ (this, function (self, other) {
		let names = self.__comparefields__.values ();
		let selfFields = [];
		let otherFields = [];
		for (let name of names) {
		    selfFields.push (self [name]);
		    otherFields.push (other [name]);
		}
		return list (selfFields).__le__(list (otherFields));
	});},
	get __gt__ () {return __get__ (this, function (self, other) {
		let names = self.__comparefields__.values ();
		let selfFields = [];
		let otherFields = [];
		for (let name of names) {
		    selfFields.push (self [name]);
		    otherFields.push (other [name]);
		}
		return list (selfFields).__gt__(list (otherFields));
	});},
	get __ge__ () {return __get__ (this, function (self, other) {
		let names = self.__comparefields__.values ();
		let selfFields = [];
		let otherFields = [];
		for (let name of names) {
		    selfFields.push (self [name]);
		    otherFields.push (other [name]);
		}
		return list (selfFields).__ge__(list (otherFields));
	});},
	py_name: null,
	hashcat: null,
	john: null,
	extended: null,
	description: null
})
for (let aClass of HashInfo.__bases__) {
	__mergefields__ (HashInfo, aClass);
};
__mergefields__ (HashInfo, {__reprfields__: new Set (['name', 'hashcat', 'john', 'extended', 'description']), __comparefields__: new Set (['name', 'hashcat', 'john', 'extended', 'description']), __initfields__: new Set (['name', 'hashcat', 'john', 'extended', 'description'])});
export var prototypes = [Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{4}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'CRC-16', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'CRC-16-CCITT', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'FCS-16', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{8}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Adler-32', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'CRC-32B', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'FCS-32', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'GHash-32-3', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'GHash-32-5', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'FNV-132', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Fletcher-32', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Joaat', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'ELF-32', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'XOR-32', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{6}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'CRC-24', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$crc32\\$)?([a-f0-9]{8}.)?[a-f0-9]{8}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'CRC-32', hashcat: 11500, john: 'crc32', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\+[a-z0-9\\/.]{12}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Eggdrop IRC Bot', hashcat: null, john: 'bfegg', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9\\/.]{12}[.26AEIMQUYcgkosw]{1}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'DES(Unix)', hashcat: 1500, john: 'descrypt', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Traditional DES', hashcat: 1500, john: 'descrypt', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'DEScrypt', hashcat: 1500, john: 'descrypt', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{16}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MySQL323', hashcat: 200, john: 'mysql', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Half MD5', hashcat: 5100, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'FNV-164', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'CRC-64', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{16}:[a-f0-9]{0,30}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Oracle H: Type (Oracle 7+), DES(Oracle)', hashcat: 3100, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9\\/.]{16}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Cisco-PIX(MD5)', hashcat: 2400, john: 'pix-md5', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\([a-z0-9\\/+]{20}\\)$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Lotus Notes/Domino 6', hashcat: 8700, john: 'dominosec', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^_[a-z0-9\\/.]{19}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'BSDi Crypt', hashcat: 12400, john: 'bsdicrypt', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{24}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'CRC-96(ZIP)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'PKZIP Master Key', hashcat: 20500, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'PKZIP Master Key (6 byte optimization)', john: null, hashcat: 20510, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$keepass\\$\\*1\\*50000\\*(0|1)\\*([a-f0-9]{32})\\*([a-f0-9]{64})\\*([a-f0-9]{32})\\*([a-f0-9]{64})\\*1\\*(192|1360)\\*([a-f0-9]{384})$'), modes: [HashInfo (__kwargtrans__ ({py_name: 'Keepass 1 AES / without keyfile', hashcat: 13400, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$keepass\\$\\*1\\*6000\\*(0|1)\\*([a-f0-9]{32})\\*([a-f0-9]{64})\\*([a-f0-9]{32})\\*([a-f0-9]{64})\\*1\\*(192|1360)\\*([a-f0-9]{2720})\\*1\\*64\\*([a-f0-9]{64})$'), modes: [HashInfo (__kwargtrans__ ({py_name: 'Keepass 1 Twofish / with keyfile', hashcat: 13400, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$keepass\\$\\*2\\*6000\\*222(\\*[a-f0-9]{64}){2}(\\*[a-f0-9]{32}){1}(\\*[a-f0-9]{64}){2}\\*1\\*64(\\*[a-f0-9]{64}){1}$'), modes: [HashInfo (__kwargtrans__ ({py_name: 'Keepass 2 AES / with keyfile', hashcat: 13400, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$keepass\\$\\*2\\*6000\\*222\\*(([a-f0-9]{32,64})(\\*)?)+$'), modes: [HashInfo (__kwargtrans__ ({py_name: 'Keepass 2 AES / without keyfile', hashcat: 13400, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9\\/.]{24}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Crypt16', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MD5', hashcat: 0, john: 'raw-md5', extended: false, description: 'Used for Linux Shadow files.'})), HashInfo (__kwargtrans__ ({py_name: 'MD4', hashcat: 900, john: 'raw-md4', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Double MD5', hashcat: 2600, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Tiger-128', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-256(128)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-512(128)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Lotus Notes/Domino 5', hashcat: 8600, john: 'lotus5', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'md5(md5(md5($pass)))', hashcat: 3500, john: null, extended: true, description: 'Hashcat mode is only supported in hashcat-legacy.'})), HashInfo (__kwargtrans__ ({py_name: 'md5(uppercase(md5($pass)))', hashcat: 4300, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(sha1($pass))', hashcat: 4400, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(utf16($pass))', hashcat: null, john: 'dynamic_29', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md4(utf16($pass))', hashcat: null, john: 'dynamic_33', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(md4($pass))', hashcat: null, john: 'dynamic_34', extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('(?:\\$haval\\$)?[a-f0-9]{32,64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Haval-128', hashcat: null, john: 'haval-128-4', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('(?:\\$ripemd\\$)?[a-f0-9]{32,40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RIPEMD-128', hashcat: null, john: 'ripemd-128', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{16}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'LM', hashcat: 3000, john: 'lm', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('(?:\\$dynamic_39\\$)?[a-f0-9]{32}\\$[a-z0-9]{1,32}\\$?[a-z0-9]{1,500}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'net-md5', hashcat: null, john: 'dynamic_39', extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:[a-z0-9]+$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Skype', hashcat: 23, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'ZipMonster', hashcat: null, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(md5(md5($pass)))', hashcat: 3500, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(uppercase(md5($pass)))', hashcat: 4300, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(sha1($pass))', hashcat: 4400, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5($pass.$salt)', hashcat: 10, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5($salt.$pass)', hashcat: 20, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(unicode($pass).$salt)', hashcat: 30, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5($salt.unicode($pass))', hashcat: 40, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'HMAC-MD5 (key = $pass)', hashcat: 50, john: 'hmac-md5', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'HMAC-MD5 (key = $salt)', hashcat: 60, john: 'hmac-md5', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(md5($salt).$pass)', hashcat: 3610, john: null, extended: true, description: 'Hashcat mode is only supported in hashcat-legacy.'})), HashInfo (__kwargtrans__ ({py_name: 'md5($salt.md5($pass))', hashcat: 3710, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5($pass.md5($salt))', hashcat: 3720, john: null, extended: true, description: 'Hashcat mode is only supported in hashcat-legacy.'})), HashInfo (__kwargtrans__ ({py_name: 'WebEdition CMS', hashcat: 3721, john: null, extended: false, description: 'Hashcat mode is only supported in hashcat-legacy.'})), HashInfo (__kwargtrans__ ({py_name: 'md5($username.0.$pass)', hashcat: 4210, john: null, extended: true, description: 'Hashcat mode is only supported in hashcat-legacy.'})), HashInfo (__kwargtrans__ ({py_name: 'md5($salt.$pass.$salt)', hashcat: 3800, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5(md5($pass).md5($salt))', hashcat: 3910, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5($salt.md5($salt.$pass))', hashcat: 4010, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5($salt.md5($pass.$salt))', hashcat: 4110, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md4($salt.$pass)', hashcat: null, john: 'dynamic_31', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md4($pass.$salt)', hashcat: null, john: 'dynamic_32', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'md5($salt.pad16($pass))', hashcat: null, john: 'dynamic_39', extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:[a-z0-9]{56}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PrestaShop', hashcat: 11000, john: null, extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$md2\\$)?[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MD2', hashcat: null, john: 'md2', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$snefru\\$)?[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Snefru-128', hashcat: null, john: 'snefru-128', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$NT\\$)?[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'NTLM', hashcat: 1000, john: 'nt', extended: false, description: 'Often used in Windows Active Directory.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^([^\\\\\\/:*?"<>|]{1,20}:)?[a-f0-9]{32}(:[^\\\\\\/:*?"<>|]{1,20})?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Domain Cached Credentials', hashcat: 1100, john: 'mscash', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^([^\\\\\\/:*?"<>|]{1,20}:)?(\\$DCC2\\$10240#[^\\\\\\/:*?"<>|]{1,20}#)?[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Domain Cached Credentials 2', hashcat: 2100, john: 'mscash2', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$1\\$[a-z0-9\\/.]{0,8}\\$[a-z0-9\\/.]{22}(:.*)?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MD5 Crypt', hashcat: 500, john: 'md5crypt', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Cisco-IOS(MD5)', hashcat: 500, john: 'md5crypt', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'FreeBSD MD5', hashcat: 500, john: 'md5crypt', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^0x[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Lineage II C4', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$H\\$[a-z0-9\\/.]{31}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'phpBB v3.x', hashcat: 400, john: 'phpass', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Wordpress v2.6.0/2.6.1', hashcat: 400, john: 'phpass', extended: false})), HashInfo (__kwargtrans__ ({py_name: "PHPass' Portable Hash", hashcat: 400, john: 'phpass', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$P\\$[a-z0-9\\/.]{31}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Wordpress ≥ v2.6.2', hashcat: 400, john: 'phpass', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Joomla ≥ v2.5.18', hashcat: 400, john: 'phpass', extended: false})), HashInfo (__kwargtrans__ ({py_name: "PHPass' Portable Hash", hashcat: 400, john: 'phpass', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:[a-z0-9]{2}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'osCommerce', hashcat: 21, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'xt:Commerce', hashcat: 21, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$apr1\\$[a-z0-9\\/.]{0,8}\\$[a-z0-9\\/.]{22}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MD5(APR)', hashcat: 1600, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Apache MD5', hashcat: 1600, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'md5apr1', hashcat: 1600, john: null, extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:.{5}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'IP.Board ≥ v2+', hashcat: 2811, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:.{8}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MyBB ≥ v1.2+', hashcat: 2811, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9]{34}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'CryptoCurrency(Adress)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{40}(:.+)?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SHA-1', hashcat: 100, john: 'raw-sha1', extended: false, description: 'Used for checksums.[link=https://en.wikipedia.org/wiki/SHA-1]See more[/link]'})), HashInfo (__kwargtrans__ ({py_name: 'Double SHA-1', hashcat: 4500, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'RIPEMD-160', hashcat: 6000, john: 'ripemd-160', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-160 (3 rounds)', hashcat: 6000, john: 'dynamic_190', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-160 (4 rounds)', hashcat: 6000, john: 'dynamic_200', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-160 (5 rounds)', hashcat: 6000, john: 'dynamic_210', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-192 (3 rounds)', hashcat: 6000, john: 'dynamic_220', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-192 (4 rounds)', hashcat: 6000, john: 'dynamic_230', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-192 (5 rounds)', hashcat: 6000, john: 'dynamic_240', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-224 (4 rounds)', hashcat: 6000, john: 'dynamic_260', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-224 (5 rounds)', hashcat: 6000, john: 'dynamic_270', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-160', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Tiger-160', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'HAS-160', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'LinkedIn', hashcat: 190, john: 'raw-sha1-linkedin', extended: false, description: 'Hashcat mode is only supported in oclHashcat.'})), HashInfo (__kwargtrans__ ({py_name: 'Skein-256(160)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-512(160)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'MangosWeb Enhanced CMS', hashcat: null, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha1(sha1(sha1($pass)))', hashcat: 4600, john: null, extended: true, description: 'Hashcat mode is only supported in hashcat-legacy.'})), HashInfo (__kwargtrans__ ({py_name: 'sha1(md5($pass))', hashcat: 4700, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha1($pass.$salt)', hashcat: 110, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha1($salt.$pass)', hashcat: 120, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha1(unicode($pass).$salt)', hashcat: 130, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha1($salt.unicode($pass))', hashcat: 140, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'HMAC-SHA1 (key = $pass)', hashcat: 150, john: 'hmac-sha1', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'HMAC-SHA1 (key = $salt)', hashcat: 160, john: 'hmac-sha1', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha1($salt.$pass.$salt)', hashcat: 4710, john: null, extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MySQL5.x', hashcat: 300, john: 'mysql-sha1', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'MySQL4.1', hashcat: 300, john: 'mysql-sha1', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9]{43}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Cisco-IOS(SHA-256)', hashcat: 5700, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9=]{47}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Fortigate(FortiOS)', hashcat: 7000, john: 'fortigate', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{48}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Haval-192', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Tiger-192', hashcat: null, john: 'tiger', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'SHA-1(Oracle)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'OSX v10.4', hashcat: 122, john: 'xsha', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'OSX v10.5', hashcat: 122, john: 'xsha', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'OSX v10.6', hashcat: 122, john: 'xsha', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{51}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Palshop CMS', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9]{51}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'CryptoCurrency(PrivateKey)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^0x0100[a-f0-9]{48}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MSSQL(2005)', hashcat: 132, john: 'mssql05', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'MSSQL(2008)', hashcat: 132, john: 'mssql05', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$md5,rounds=[0-9]+\\$|\\$md5\\$rounds=[0-9]+\\$|\\$md5\\$)[a-z0-9\\/.]{0,16}(\\$|\\$\\$)[a-z0-9\\/.]{22}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Sun MD5 Crypt', hashcat: 3300, john: 'sunmd5', extended: false, description: 'Hashcat mode is only supported in hashcat-legacy.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{56}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SHA-224', hashcat: 1300, john: 'raw-sha224', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'sha224($salt.$pass)', hashcat: null, john: 'dynamic_51', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha224($pass.$salt))', hashcat: null, john: 'dynamic_52', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha224(sha224($pass))', hashcat: null, john: 'dynamic_53', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha224(sha224_raw($pass))', hashcat: null, john: 'dynamic_54', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha224(sha224($pass).$salt)', hashcat: null, john: 'dynamic_55', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha224($salt.sha224($pass))', hashcat: null, john: 'dynamic_56', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha224(sha224($salt).sha224($pass))', hashcat: null, john: 'dynamic_57', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha224(sha224($pass).sha224($pass))', hashcat: null, john: 'dynamic_58', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'Haval-224', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'SHA3-224', hashcat: 17300, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-256(224)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-512(224)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-224', hashcat: null, john: 'dynamic_330', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Keccak-224', hashcat: 17700, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$2[abxy]?|\\$2)\\$[0-9]{2}\\$[a-z0-9\\/.]{53}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Blowfish(OpenBSD)', hashcat: 3200, john: 'bcrypt', extended: false, description: 'Can be used in Linux Shadow Files.'})), HashInfo (__kwargtrans__ ({py_name: 'Woltlab Burning Board 4.x', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'bcrypt', hashcat: 3200, john: 'bcrypt', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$y\\$[.\\/A-Za-z0-9]+\\$[.\\/a-zA-Z0-9]+\\$[.\\/A-Za-z0-9]{43}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'yescrypt', hashcat: 'Not yet supported, see notes in summary.', john: "On systems that use libxcrypt, you may use --format=crypt to use JtR in passthrough mode which uses the system's crypt function.", extended: false, description: 'Can be used in Linux Shadow Files in modern Linux distributions like Ubuntu 22.04, Debian 11, Fedora 35. On hashcat this is not yet implemented, please vote (👍 "thumbs up") on this issue: https://github.com/hashcat/hashcat/issues/2816.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{40}:[a-f0-9]{16}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Android PIN', hashcat: 5800, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(S:)?[a-f0-9]{40}(:)?[a-f0-9]{20}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Oracle 11g/12c', hashcat: 112, john: 'oracle11', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:.{3}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'vBulletin < v3.8.5', hashcat: 2611, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:.{30}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'vBulletin ≥ v3.8.5', hashcat: 2711, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$snefru\\$)?[a-f0-9]{64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Snefru-256', hashcat: null, john: 'snefru-256', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{64}(:.+)?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SHA-256', hashcat: 1400, john: 'raw-sha256', extended: false, description: '256-bit key and is a good partner-function for AES. Can be used in Shadow files.'})), HashInfo (__kwargtrans__ ({py_name: 'RIPEMD-256', hashcat: null, john: 'dynamic_140', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-256 (3 rounds)', hashcat: null, john: 'dynamic_140', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-256 (4 rounds)', hashcat: null, john: 'dynamic_290', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Haval-256 (5 rounds)', hashcat: null, john: 'dynamic_300', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'GOST R 34.11-94', hashcat: 6900, john: 'gost', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'GOST CryptoPro S-Box', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Blake2b-256', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'SHA3-256', hashcat: 17400, john: 'dynamic_380', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'PANAMA', hashcat: null, john: 'dynamic_320', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'BLAKE2-256', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'BLAKE2-384', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-256', hashcat: null, john: 'skein-256', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-512(256)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Ventrilo', hashcat: null, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256($pass.$salt)', hashcat: 1410, john: 'dynamic_62', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256($salt.$pass)', hashcat: 1420, john: 'dynamic_61', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256(sha256($pass))', hashcat: 1420, john: 'dynamic_63', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256(sha256_raw($pass)))', hashcat: 1420, john: 'dynamic_64', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256(sha256($pass).$salt)', hashcat: 1420, john: 'dynamic_65', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256($salt.sha256($pass))', hashcat: 1420, john: 'dynamic_66', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256(sha256($salt).sha256($pass))', hashcat: 1420, john: 'dynamic_67', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256(sha256($pass).sha256($pass))', hashcat: 1420, john: 'dynamic_68', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256(unicode($pass).$salt)', hashcat: 1430, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha256($salt.unicode($pass))', hashcat: 1440, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'HMAC-SHA256 (key = $pass)', hashcat: 1450, john: 'hmac-sha256', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'HMAC-SHA256 (key = $salt)', hashcat: 1460, john: 'hmac-sha256', extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:[a-z0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Joomla < v2.5.18', hashcat: 11, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SAM(LM_Hash:NT_Hash)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$chap\\$0\\*)?[a-f0-9]{32}[\\*:][a-f0-9]{32}(:[0-9]{2})?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MD5(Chap)', hashcat: 4800, john: 'chap', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'iSCSI CHAP Authentication', hashcat: 4800, john: 'chap', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$episerver\\$\\*0\\*[a-z0-9\\/=+]+\\*[a-z0-9\\/=+]{27,28}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'EPiServer 6.x < v4', hashcat: 141, john: 'episerver', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{80}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RIPEMD-320', hashcat: null, john: 'dynamic_150', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$episerver\\$\\*1\\*[a-z0-9\\/=+]+\\*[a-z0-9\\/=+]{42,43}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'EPiServer 6.x ≥ v4', hashcat: 1441, john: 'episerver', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^0x0100[a-f0-9]{88}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MSSQL(2000)', hashcat: 131, john: 'mssql', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{96}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SHA-384', hashcat: 10800, john: 'raw-sha384', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'SHA3-384', hashcat: null, john: 'dynamic_390', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-512(384)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-1024(384)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'sha384($salt.$pass)', hashcat: null, john: 'dynamic_71', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha384($pass.$salt)', hashcat: null, john: 'dynamic_72', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha384(sha384($pass))', hashcat: null, john: 'dynamic_73', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha384(sha384_raw($pass))', hashcat: null, john: 'dynamic_74', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha384(sha384($pass).$salt)', hashcat: null, john: 'dynamic_75', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha384($salt.sha384($pass))', hashcat: null, john: 'dynamic_76', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha384(sha384($salt).sha384($pass))', hashcat: null, john: 'dynamic_77', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha384(sha384($pass).sha384($pass))', hashcat: null, john: 'dynamic_78', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'Skein-384', hashcat: null, john: 'dynamic_350', extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{128}(:.+)?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SHA-512', hashcat: 1700, john: 'raw-sha512', extended: false, description: 'Used in Bitcoin Blockchain and Shadow Files.'})), HashInfo (__kwargtrans__ ({py_name: 'Keccak-512', hashcat: 1800, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Whirlpool', hashcat: 6100, john: 'whirlpool', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Salsa10', hashcat: null, john: null, extended: false, description: 'Not considered a hash function.[link = https://bugs.php.net/bug.php?id=60783]See more[/link]'})), HashInfo (__kwargtrans__ ({py_name: 'Salsa20', hashcat: null, john: null, extended: false, description: 'Not considered a hash function.[link = https://bugs.php.net/bug.php?id=60783]See more[/link]'})), HashInfo (__kwargtrans__ ({py_name: 'Blake2', hashcat: 600, john: 'raw-blake2', extended: false, description: 'Used in Wireguard, Zcash, IPFS and more.[link = https://en.wikipedia.org/wiki/BLAKE_(hash_function)#Users_of_BLAKE2]See more[/link]'})), HashInfo (__kwargtrans__ ({py_name: 'SHA3-512', hashcat: 17600, john: 'raw-sha3', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-512', hashcat: null, john: 'skein-512', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Skein-1024(512)', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'sha512($pass.$salt)', hashcat: 1710, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha512($salt.$pass)', hashcat: 1720, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha512(unicode($pass).$salt)', hashcat: 1730, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'sha512($salt.unicode($pass))', hashcat: 1740, john: null, extended: true})), HashInfo (__kwargtrans__ ({py_name: 'HMAC-SHA512 (key = $pass)', hashcat: 1750, john: 'hmac-sha512', extended: true})), HashInfo (__kwargtrans__ ({py_name: 'BLAKE2-224', hashcat: null, john: null, extended: false})), HashInfo (__kwargtrans__ ({py_name: 'HMAC-SHA512 (key = $salt)', hashcat: 1760, john: 'hmac-sha512', extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Keccak-256', hashcat: 17800, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{96}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Keccak-384', hashcat: 17900, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{136}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'OSX v10.7', hashcat: 1722, john: 'xsha512', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^0x0200[a-f0-9]{136}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MSSQL(2012)', hashcat: 1731, john: 'mssql12', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'MSSQL(2014)', hashcat: 1731, john: 'mssql12', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$ml\\$[0-9]+\\$[a-f0-9]{64}\\$[a-f0-9]{128}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'OSX v10.8', hashcat: 7100, john: 'pbkdf2-hmac-sha512', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'OSX v10.9', hashcat: 7100, john: 'pbkdf2-hmac-sha512', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{256}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Skein-1024', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^grub\\.pbkdf2\\.sha512\\.[0-9]+\\.([a-f0-9]{128,2048}\\.|[0-9]+\\.)?[a-f0-9]{128}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'GRUB 2', hashcat: 7200, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^sha1\\$[a-z0-9]+\\$[a-f0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(SHA-1)', hashcat: 124, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{49}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Citrix Netscaler', hashcat: 8100, john: 'citrix_ns10', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$S\\$[a-z0-9\\/.]{52}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Drupal > v7.x', hashcat: 7900, john: 'drupal7', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$5\\$(rounds=[0-9]+\\$)?[a-z0-9\\/.]{0,16}\\$[a-z0-9\\/.]{43}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SHA-256 Crypt', hashcat: 7400, john: 'sha256crypt', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^0x[a-f0-9]{4}[a-f0-9]{16}[a-f0-9]{64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Sybase ASE', hashcat: 8000, john: 'sybasease', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$6\\$(rounds=[0-9]+\\$)?[a-z0-9\\/.]{0,16}\\$[a-z0-9\\/.]{86}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SHA-512 Crypt', hashcat: 1800, john: 'sha512crypt', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$sha\\$[a-z0-9]{1,16}\\$([a-f0-9]{32}|[a-f0-9]{40}|[a-f0-9]{64}|[a-f0-9]{128}|[a-f0-9]{140})$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Minecraft(AuthMe Reloaded)', hashcat: 20711, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^sha256\\$[a-z0-9]+\\$[a-f0-9]{64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(SHA-256)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^sha384\\$[a-z0-9]+\\$[a-f0-9]{96}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(SHA-384)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^crypt1:[a-z0-9+=]{12}:[a-z0-9+=]{12}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Clavister Secure Gateway', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{112}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Cisco VPN Client(PCF-File)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{1329}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Microsoft MSTSC(RDP-File)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[^\\\\\\/:*?"<>|]{1,20}[:]{2,3}([^\\\\\\/:*?"<>|]{1,20})?:[a-f0-9]{48}:[a-f0-9]{48}:[a-f0-9]{16}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'NetNTLMv1-VANILLA / NetNTLMv1+ESS', hashcat: 5500, john: 'netntlm', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^([^\\\\\\/:*?"<>|]{1,20}\\\\)?[^\\\\\\/:*?"<>|]{1,20}[:]{2,3}([^\\\\\\/:*?"<>|]{1,20}:)?[^\\\\\\/:*?"<>|]{1,20}:[a-f0-9]{32}:[a-f0-9]+$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'NetNTLMv2', hashcat: 5600, john: 'netntlmv2', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$(krb5pa|mskrb5)\\$(23)?\\$.+\\$[a-f0-9]{1,}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5 AS-REQ Pre-Auth', hashcat: 7500, john: 'krb5pa-md5', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$scram\\$[0-9]+\\$[a-z0-9\\/.]{16}\\$sha-1=[a-z0-9\\/.]{27},sha-256=[a-z0-9\\/.]{43},sha-512=[a-z0-9\\/.]{86}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SCRAM Hash', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{40}:[a-f0-9]{0,32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Redmine Project Management Web App', hashcat: 4521, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^([^$]+)?\\$[a-f0-9]{16}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SAP CODVN B (BCODE)', hashcat: 7700, john: 'sapb', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(.+)?\\$[a-f0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SAP CODVN F/G (PASSCODE)', hashcat: 7800, john: 'sapg', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(.+\\$)?[a-z0-9\\/.+]{30}(:.+)?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Juniper Netscreen/SSG(ScreenOS)', hashcat: 22, john: 'md5ns', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^0x(?:[a-f0-9]{60}|[a-f0-9]{40})$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'EPi', hashcat: 123, john: null, extended: false, description: 'Hashcat mode is no longer supported.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{40}:[^*]{1,25}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SMF ≥ v1.1', hashcat: 121, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$wbb3\\$\\*1\\*)?[a-f0-9]{40}[:*][a-f0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Woltlab Burning Board 3.x', hashcat: 8400, john: 'wbb3', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{130}(:[a-f0-9]{40})?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'IPMI2 RAKP HMAC-SHA1', hashcat: 7300, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{32}:[0-9]+:[a-z0-9_.+-]+@[a-z0-9-]+\\.[a-z0-9-.]+$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Lastpass', hashcat: 6800, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9\\/.]{16}([:$].{1,})?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Cisco-ASA(MD5)', hashcat: 2410, john: 'asa-md5', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$vnc\\$\\*[a-f0-9]{32}\\*[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'VNC', hashcat: null, john: 'vnc', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9]{32}(:([a-z0-9-]+\\.)?[a-z0-9-.]+\\.[a-z]{2,7}:.+:[0-9]+)?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'DNSSEC(NSEC3)', hashcat: 8300, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(user-.+:)?\\$racf\\$\\*.+\\*[a-f0-9]{16}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RACF', hashcat: 8500, john: 'racf', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$3\\$\\$[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'NTHash(FreeBSD Variant)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$sha1\\$[0-9]+\\$[a-z0-9\\/.]{0,64}\\$[a-z0-9\\/.]{28}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SHA-1 Crypt', hashcat: 15100, john: 'sha1crypt', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{70}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'hMailServer', hashcat: 1421, john: 'hmailserver', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[:\\$][AB][:\\$]([a-f0-9]{1,8}[:\\$])?[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MediaWiki', hashcat: 3711, john: 'mediawiki', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{140}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Minecraft(xAuth)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pbkdf2(-sha1)?\\$[0-9]+\\$[a-z0-9\\/.]+\\$[a-z0-9\\/.]{27}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PBKDF2-SHA1(Generic)', hashcat: 20400, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pbkdf2-sha256\\$[0-9]+\\$[a-z0-9\\/.]+\\$[a-z0-9\\/.]{43}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PBKDF2-SHA256(Generic)', hashcat: 20300, john: 'pbkdf2-hmac-sha256', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pbkdf2-sha512\\$[0-9]+\\$[a-z0-9\\/.]+\\$[a-z0-9\\/.]{86}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PBKDF2-SHA512(Generic)', hashcat: 20200, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$p5k2\\$[0-9]+\\$[a-z0-9\\/+=-]+\\$[a-z0-9\\/+-]{27}=$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PBKDF2(Cryptacular)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$p5k2\\$[0-9]+\\$[a-z0-9\\/.]+\\$[a-z0-9\\/.]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PBKDF2(Dwayne Litzenberger)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$PHPS\\$.+\\$[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PHPS', hashcat: 2612, john: 'phps', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[0-9]{4}:[a-f0-9]{16}:[a-f0-9]{2080}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: '1Password(Agile Keychain)', hashcat: 6600, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{64}:[a-f0-9]{32}:[0-9]{5}:[a-f0-9]{608}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: '1Password(Cloud Keychain)', hashcat: 8200, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{256}:[a-f0-9]{256}:[a-f0-9]{16}:[a-f0-9]{16}:[a-f0-9]{320}:[a-f0-9]{16}:[a-f0-9]{40}:[a-f0-9]{40}:[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'IKE-PSK MD5', hashcat: 5300, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{256}:[a-f0-9]{256}:[a-f0-9]{16}:[a-f0-9]{16}:[a-f0-9]{320}:[a-f0-9]{16}:[a-f0-9]{40}:[a-f0-9]{40}:[a-f0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'IKE-PSK SHA1', hashcat: 5400, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9\\/+]{27}=$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PeopleSoft', hashcat: 133, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^crypt\\$[a-f0-9]{5}\\$[a-z0-9\\/.]{13}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(DES Crypt Wrapper)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$django\\$\\*1\\*)?pbkdf2_sha256\\$[0-9]+\\$[a-z0-9]+\\$[a-z0-9\\/+=]{44}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(PBKDF2-HMAC-SHA256)', hashcat: 10000, john: 'django', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^pbkdf2_sha1\\$[0-9]+\\$[a-z0-9]+\\$[a-z0-9\\/+=]{28}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(PBKDF2-HMAC-SHA1)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^bcrypt(\\$2[axy]|\\$2)\\$[0-9]{2}\\$[a-z0-9\\/.]{53}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(bcrypt)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^md5\\$[a-f0-9]+\\$[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(MD5)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\{PKCS5S2\\}[a-z0-9\\/+]{64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PBKDF2(Atlassian)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^md5[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PostgreSQL MD5', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\([a-z0-9\\/+]{49}\\)$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Lotus Notes/Domino 8', hashcat: 9100, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^SCRYPT:[0-9]{1,}:[0-9]{1}:[0-9]{1}:[a-z0-9:\\/+=]{1,}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'scrypt', hashcat: 8900, john: null, extended: false, description: 'Used in Dogecoin and Litecoin.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$8\\$[a-z0-9\\/.]{14}\\$[a-z0-9\\/.]{43}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Cisco Type 8', hashcat: 9200, john: 'cisco8', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$9\\$[a-z0-9\\/.]{14}\\$[a-z0-9\\/.]{43}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Cisco Type 9', hashcat: 9300, john: 'cisco9', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$office\\$\\*2007\\*[0-9]{2}\\*[0-9]{3}\\*[0-9]{2}\\*[a-z0-9]{32}\\*[a-z0-9]{32}\\*[a-z0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Microsoft Office 2007', hashcat: 9400, john: 'office', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$office\\$\\*2010\\*[0-9]{6}\\*[0-9]{3}\\*[0-9]{2}\\*[a-z0-9]{32}\\*[a-z0-9]{32}\\*[a-z0-9]{64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Microsoft Office 2010', hashcat: 9500, john: 'office', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\\\$office\\\\$2016\\\\$[0-9]\\\\$[0-9]{6}\\\\$[^$]{24}\\\\$[^$]{88}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Microsoft Office 2016 - SheetProtection', hashcat: 25300, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$office\\$\\*2013\\*[0-9]{6}\\*[0-9]{3}\\*[0-9]{2}\\*[a-z0-9]{32}\\*[a-z0-9]{32}\\*[a-z0-9]{64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Microsoft Office 2013', hashcat: 9600, john: 'office', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$fde\\$[0-9]{2}\\$[a-f0-9]{32}\\$[0-9]{2}\\$[a-f0-9]{32}\\$[a-f0-9]{3072}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Android FDE ≤ 4.3', hashcat: 8800, john: 'fde', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$krb5tgs\\$23\\$\\*[^*]*\\*\\$[a-f0-9]{32}\\$[a-f0-9]{64,40960}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5 TGS-REP etype 23', hashcat: 13100, john: 'krb5tgs', extended: false, description: 'Used in Windows Active Directory.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$oldoffice\\$[01]\\*[a-f0-9]{32}\\*[a-f0-9]{32}\\*[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Microsoft Office ≤ 2003 (MD5+RC4)', hashcat: 9700, john: 'oldoffice', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Microsoft Office ≤ 2003 (MD5+RC4) collider-mode #1', hashcat: 9710, john: 'oldoffice', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$oldoffice\\$[34]\\*[a-f0-9]{32}\\*[a-f0-9]{32}\\*[a-f0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Microsoft Office ≤ 2003 (SHA1+RC4)', hashcat: 9800, john: 'oldoffice', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'Microsoft Office ≤ 2003 (SHA1+RC4) collider-mode #1', hashcat: 9810, john: 'oldoffice', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$oldoffice\\$[34]\\*[a-f0-9]{32}\\*[a-f0-9]{32}\\*[a-f0-9]{40}:[a-f0-9]{10}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MS Office ⇐ 2003 $3, SHA1 + RC4, collider #2', hashcat: 9820, john: 'oldoffice', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$radmin2\\$)?[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RAdmin v2.x', hashcat: 9900, john: 'radmin', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$cram_md5\\$[a-z0-9\\/+=-]+\\$[a-z0-9\\/+=-]{52}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'CRAM-MD5', hashcat: 10200, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{16}:2:4:[a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SipHash', hashcat: 10100, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-f0-9]{4,}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Cisco Type 7', hashcat: null, john: null, extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^[a-z0-9\\/.]{13,}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'BigCrypt', hashcat: null, john: 'bigcrypt', extended: true}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$cisco4\\$)?[a-z0-9\\/.]{43}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Cisco Type 4', hashcat: null, john: 'cisco4', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^bcrypt_sha256\\$\\$(2[axy]|2)\\$[0-9]+\\$[a-z0-9\\/.]{53}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Django(bcrypt-SHA256)', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$postgres\\$.[^\\*]+[*:][a-f0-9]{1,32}[*:][a-f0-9]{32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PostgreSQL Challenge-Response Authentication (MD5)', hashcat: 11100, john: 'postgres', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$siemens-s7\\$[0-9]{1}\\$[a-f0-9]{40}\\$[a-f0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Siemens-S7', hashcat: null, john: 'siemens-s7', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$pst\\$)?[a-f0-9]{8}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Microsoft Outlook PST', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^sha256[:$][0-9]+[:$][a-z0-9\\/+=]+[:$][a-z0-9\\/+]{32,128}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PBKDF2-HMAC-SHA256(PHP)', hashcat: 10900, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^(\\$dahua\\$)?[a-z0-9]{8}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Dahua', hashcat: null, john: 'dahua', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$mysqlna\\$[a-f0-9]{40}[:*][a-f0-9]{40}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MySQL Challenge-Response Authentication (SHA1)', hashcat: 11200, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$pdf\\$1\\*[2|3]\\*[0-9]{2}\\*[-0-9]{1,6}\\*[0-9]\\*[0-9]{2}\\*[a-f0-9]{32,32}\\*[0-9]{2}\\*[a-f0-9]{64}\\*[0-9]{2}\\*[a-f0-9]{64}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PDF 1.1 - 1.3 (Acrobat 2 - 4)', hashcat: 10400, john: 'pdf', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #1', hashcat: 10410, john: 'pdf', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$pdf\\$1\\*[2|3]\\*[0-9]{2}\\*[-0-9]{1,6}\\*[0-9]\\*[0-9]{2}\\*[a-f0-9]{32}\\*[0-9]{2}\\*[a-f0-9]{64}\\*[0-9]{2}\\*[a-f0-9]{64}:[a-f0-9]{10}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #2', hashcat: 10420, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pdf\\$[24]\\*[34]\\*128\\*[0-9-]{1,5}\\*1\\*(16|32)\\*[a-f0-9]{32,64}\\*32\\*[a-f0-9]{64}\\*(8|16|32)\\*[a-f0-9]{16,64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PDF 1.4 - 1.6 (Acrobat 5 - 8)', hashcat: 10500, john: 'pdf', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$pdf\\$5\\*[5|6]\\*[0-9]{3}\\*[-0-9]{1,6}\\*[0-9]\\*[0-9]{1,4}\\*[a-f0-9]{0,1024}\\*[0-9]{1,4}\\*[a-f0-9]{0,1024}\\*[0-9]{1,4}\\*[a-f0-9]{0,1024}\\*[0-9]{1,4}\\*[a-f0-9]{0,1024}\\*[0-9]{1,4}\\*[a-f0-9]{0,1024}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PDF 1.7 Level 3 (Acrobat 9)', hashcat: 10600, john: 'pdf', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$pdf\\$5\\*[5|6]\\*[0-9]{3}\\*[-0-9]{1,6}\\*[0-9]\\*[0-9]{1,4}\\*[a-f0-9]{0,1024}\\*[0-9]{1,4}\\*[a-f0-9]{0,1024}\\*[0-9]{1,4}\\*[a-f0-9]{0,1024}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PDF 1.7 Level 8 (Acrobat 10 - 11)', hashcat: 10700, john: 'pdf', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$krb5asrep\\$23\\$[^:]+:[a-f0-9]{32,32}\\$[a-f0-9]{64,40960}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5 AS-REP etype 23', hashcat: 18200, john: 'krb5pa-sha1', extended: false, description: 'Used for Windows Active Directory'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$krb5tgs\\$17\\$[^$]{1,512}\\$[^$]{1,512}\\$[^$]{1,4}?\\$?[a-f0-9]{1,32}\\$[a-f0-9]{64,40960}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96)', hashcat: 19600, john: null, extended: false, description: 'Used for Windows Active Directory'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$krb5tgs\\$18\\$[^$]{1,512}\\$[^$]{1,512}\\$[^$]{1,4}?\\$?[a-f0-9]{1,32}\\$[a-f0-9]{64,40960}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96)', hashcat: 19700, john: null, extended: false, description: 'Used for Windows Active Directory'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$krb5pa\\$17\\$[^$]{1,512}\\$[^$]{1,512}\\$[a-f0-9]{104,112}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5, etype 17, Pre-Auth', hashcat: 19800, john: null, extended: false, description: 'Used for Windows Active Directory'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$krb5pa\\$17\\$[^$]{1,512}\\$[^$]{1,512}\\$[^$]{0,512}\\$[a-f0-9]{104,112}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5, etype 17, Pre-Auth (with salt)', hashcat: null, john: 'krb5pa-sha1', extended: false, description: 'Used for Windows Active Directory'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$krb5pa\\$18\\$[^$]{1,512}\\$[^$]{1,512}\\$[^$]{0,512}\\$[a-f0-9]{104,112}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5, etype 18, Pre-Auth (with salt)', hashcat: null, john: 'krb5pa-sha1', extended: false, description: 'Used for Windows Active Directory'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$krb5pa\\$18\\$[^$]{1,512}\\$[^$]{1,512}\\$[a-f0-9]{104,112}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Kerberos 5, etype 18, Pre-Auth', hashcat: 19900, john: null, extended: false, description: 'Used for Windows Active Directory'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$bitcoin\\$[0-9]{2,4}\\$[a-f0-9$]{250,350}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Bitcoin / Litecoin', hashcat: 11300, john: 'bitcoin', extended: false, description: 'Use Bitcoin2John.py to extract the hash for cracking.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$ethereum\\$[a-z0-9*]{150,250}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Ethereum Wallet, PBKDF2-HMAC-SHA256', hashcat: 15600, john: 'ethereum-opencl', extended: false, description: 'Use ethereum2john.py to crack.'})), HashInfo (__kwargtrans__ ({py_name: 'Ethereum Pre-Sale Wallet, PBKDF2-HMAC-SHA256', hashcat: 16300, john: 'ethereum-presale-opencl', extended: false, description: 'Use ethereum2john.py to crack.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$monero\\$(0)\\*[a-f0-9]{32,3196}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Monero', hashcat: null, john: 'monero', extended: false, description: 'Use monero2john.py to crack.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$electrum\\$[1-3]\\*[a-f0-9]{32,32}\\*[a-f0-9]{32,32}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Electrum Wallet (Salt-Type 1-3)', hashcat: 16600, john: 'electrum', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$electrum\\$4\\*[a-f0-9]{1,66}\\*[a-f0-9]{128,32768}\\*[a-f0-9]{64,64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Electrum Wallet (Salt-Type 4)', hashcat: 21700, john: 'electrum', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$electrum\\$5\\*[a-f0-9]{66,66}\\*[a-f0-9]{2048,2048}\\*[a-f0-9]{64,64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Electrum Wallet (Salt-Type 5)', hashcat: 21800, john: 'electrum', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$ab\\$[0-9]{1}\\*[0-9]{1}\\*[0-9]{1,6}\\*[a-f0-9]{128}\\*[a-f0-9]{128}\\*[a-f0-9]{32}\\*[a-f0-9]{192}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Android Backup', hashcat: 18900, john: 'androidbackup', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$zip2\\$\\*[0-9]{1}\\*[0-9]{1}\\*[0-9]{1}\\*[a-f0-9]{16,32}\\*[a-f0-9]{1,6}\\*[a-f0-9]{1,6}\\*[a-f0-9]+\\*[a-f0-9]{20}\\*\\$\\/zip2\\$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'WinZip', hashcat: 13600, john: 'zip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$itunes_backup\\$\\*[0-9]{1,2}\\*[a-f0-9]{80}\\*[0-9]{1,6}\\*[a-f0-9]{40}\\*[0-9]{0,10}\\*[a-f0-9]{0,40}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'iTunes backup >= 10.0', hashcat: 14800, john: 'itunes-backup', extended: false})), HashInfo (__kwargtrans__ ({py_name: 'iTunes backup < 10.0', hashcat: 14700, john: 'itunes-backup', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$telegram\\$[a-f0-9*]{99}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Telegram Mobile App Passcode (SHA256)', hashcat: 22301, john: 'Telegram', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\\\$telegram\\\\$1\\\\*4000\\\\*[a-f0-9]{64}\\\\*[a-f0-9]{576}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Telegram Desktop 1.3.9', hashcat: null, john: 'telegram', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\\\$telegram\\\\$2\\\\*100000\\\\*[a-f0-9]{64}\\\\*[a-f0-9]{576}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Telegram Desktop >= 2.1.14-beta / 2.2.0', hashcat: null, john: 'telegram', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$BLAKE2\\$[a-f0-9]{128}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'BLAKE2b-512', hashcat: 600, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$oldoffice\\$[a-f0-9*]{100}:[a-f0-9]{10}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MS Office ⇐ 2003 $0/$1, MD5 + RC4, collider #2', hashcat: 9720, john: 'oldoffice', extended: false, description: 'Use office2john.py to grab the hash.'}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$office\\$2016\\$[0-9]\\$[0-9]{6}\\$[^$]{24}\\$[^$]{88}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'MS Office 2016 - SheetProtection', hashcat: 25300, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$7z\\$[0-9]\\$[0-9]{1,2}\\$[0-9]{1}\\$[^$]{0,64}\\$[0-9]{1,2}\\$[a-f0-9]{32}\\$[0-9]{1,10}\\$[0-9]{1,6}\\$[0-9]{1,6}\\$[a-f0-9]{2,}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: '7-zip', hashcat: 11600, john: '7z', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$zip3\\$\\*[0-9]\\*[0-9]\\*256\\*[0-9]\\*[a-f0-9]{0,32}\\*[a-f0-9]{288}\\*[0-9]\\*[0-9]\\*[0-9]\\*[^\\s]{0,64}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SecureZIP AES-256', hashcat: 23003, john: 'securezip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$zip3\\$\\*[0-9]\\*[0-9]\\*192\\*[0-9]\\*[a-f0-9]{0,32}\\*[a-f0-9]{288}\\*[0-9]\\*[0-9]\\*[0-9]\\*[^\\s]{0,64}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SecureZIP AES-192', hashcat: 23002, john: 'securezip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$zip3\\$\\*[0-9]\\*[0-9]\\*128\\*[0-9]\\*[a-f0-9]{0,32}\\*[a-f0-9]{288}\\*[0-9]\\*[0-9]\\*[0-9]\\*[^\\s]{0,64}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'SecureZIP AES-128', hashcat: 23001, john: 'securezip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pkzip2?\\$(1)\\*[0-9]{1}\\*[0-9]{1}\\*[0-9a-f]{1,3}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,4}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,8}\\*(8)\\*[0-9a-f]{1,8}(\\*[0-9a-f]{1,8})?\\*[0-9a-f]{1,8}\\*[a-f0-9]+\\*\\$\\/pkzip2?\\$$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PKZIP (Compressed)', hashcat: 17200, john: 'pkzip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pkzip2?\\$(1)\\*[0-9]{1}\\*[0-9]{1}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,8}\\*(0)\\*[0-9a-f]{1,8}(\\*[0-9a-f]{1,8})?\\*[0-9a-f]{1,8}\\*[a-f0-9]+\\*\\$\\/pkzip2?\\$$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PKZIP (Uncompressed)', hashcat: 17210, john: 'pkzip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pkzip2?\\$([2-8])\\*[0-9]{1}(\\*[0-9]{1}\\*[0-9a-f]{1,3}\\*([^0*][0-9a-f]{0,2})\\*[0-9a-f]{1,8}(\\*[0-9a-f]{1,8})?\\*[0-9a-f]{1,8}\\*[0-9a-f]+)+\\*(8)\\*[0-9a-f]{1,8}(\\*[0-9a-f]{1,8})?\\*[0-9a-f]{1,8}\\*[a-f0-9]+\\*\\$\\/pkzip2?\\$$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PKZIP (Compressed Multi-File)', hashcat: 17220, john: 'pkzip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pkzip2?\\$([2-8])\\*[0-9]{1}(\\*[0-9]{1}\\*[0-9a-f]{1,8}\\*([0-9a-f]{1,8})\\*[0-9a-f]{1,8}(\\*[0-9a-f]{1,8})?\\*[0-9a-f]{1,8}\\*[0-9a-f]+)+\\*([08])\\*[0-9a-f]{1,8}(\\*[0-9a-f]{1,8})?\\*[0-9a-f]{1,8}\\*[a-f0-9]+\\*\\$\\/pkzip2?\\$$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PKZIP (Mixed Multi-File)', hashcat: 17225, john: 'pkzip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$pkzip2?\\$([2-8])\\*[0-9]{1}(\\*[0-9]{1}\\*[0-9a-f]{1,3}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,8}(\\*[0-9a-f]{1,8})?\\*[0-9a-f]{1,8}\\*[0-9a-f]+)+\\*\\$\\/pkzip2?\\$$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'PKZIP (Mixed Multi-File Checksum-Only)', hashcat: 17230, john: 'pkzip', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$argon2i\\$v=19\\$m=[0-9]{1,6},t=[0-9]{1,2},p=[0-9]{1,2}\\$[^$]+\\$[^\\s]{6,134}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Argon2i', hashcat: null, john: 'argon2', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$argon2id\\$v=19\\$m=[0-9]{1,6},t=[0-9]{1,2},p=[0-9]{1,2}\\$[^$]+\\$[^\\s]{6,134}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Argon2id', hashcat: null, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$argon2d\\$v=19\\$m=[0-9]{1,6},t=[0-9]{1,2},p=[0-9]{1,2}\\$[^$]+\\$[^\\s]{6,134}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Argon2d', hashcat: null, john: 'argon2', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$bitlocker\\$[0-9]\\$[0-9]{2}\\$[a-f0-9]{32}\\$[a-f0-9]{7}\\$[a-f0-9]{2}\\$[a-f0-9]{24}\\$[a-f0-9]{2}\\$[a-f0-9]{120}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'BitLocker', hashcat: 22100, john: 'bitlocker', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('\\$racf\\$\\*.{1,}\\*[A-F0-9]{16}', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RACF', hashcat: 8500, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$sshng\\$4\\$16\\$[0-9]{32}\\$1232\\$[a-f0-9]{2464}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RSA/DSA/EC/OpenSSH Private Keys ($4$)', hashcat: 22941, john: null, extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$RAR3\\$\\*(1)\\*[0-9a-f]{1,16}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,16}\\*[0-9a-f]{1,16}\\*[01]\\*([0-9a-f]+|[^*]{1,64}\\*[0-9a-f]{1,16})\\*30$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RAR3-p (Uncompressed)', hashcat: 23700, john: 'rar', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$RAR3\\$\\*(1)\\*[0-9a-f]{1,16}\\*[0-9a-f]{1,8}\\*[0-9a-f]{1,16}\\*[0-9a-f]{1,16}\\*[01]\\*([0-9a-f]+|[^*]{1,64}\\*[0-9a-f]{1,16})\\*(31|32|33|34|35)$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RAR3-p (Compressed)', hashcat: 23800, john: 'rar', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$RAR3\\$\\*0\\*[0-9a-f]{1,16}\\*[0-9a-f]+$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RAR3-hp', hashcat: 12500, john: 'rar', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$rar5\\$[0-9a-f]{1,2}\\$[0-9a-f]{1,32}\\$[0-9a-f]{1,2}\\$[0-9a-f]{1,32}\\$[0-9a-f]{1,2}\\$[0-9a-f]{1,16}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'RAR5', hashcat: 13000, john: 'rar5', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$keepass\\$\\*1\\*\\d+\\*\\d\\*[0-9a-f]{32}\\*[0-9a-f]{64}\\*[0-9a-f]{32}\\*[0-9a-f]{64}\\*\\d\\*[^*]*(\\*[0-9a-f]+)?$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'KeePass 1 AES (without keyfile)', hashcat: 13400, john: 'KeePass', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$keepass\\$\\*1\\*\\d+\\*\\d\\*[0-9a-f]{32}\\*[0-9a-f]{64}\\*[0-9a-f]{32}\\*[0-9a-f]{64}\\*\\d\\*[^*]*(\\*[0-9a-f]+)?\\*\\d+\\*\\d+\\*[0-9a-f]{64}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'KeePass 1 TwoFish (with keyfile)', hashcat: 13400, john: 'KeePass', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$keepass\\$\\*2\\*\\d+\\*\\d+\\*[0-9a-f]+\\*[0-9a-f]+\\*[0-9a-f]+\\*[0-9a-f]+\\*[0-9a-f]+$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'KeePass 2 AES (without keyfile)', hashcat: 13400, john: 'KeePass', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$keepass\\$\\*2\\*\\d+\\*\\d+\\*[0-9a-f]+\\*[0-9a-f]+\\*[0-9a-f]+\\*[0-9a-f]+\\*[0-9a-f]+\\*\\d+\\*\\d+\\*[0-9a-f]+$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'KeePass 2 AES (with keyfile)', hashcat: 13400, john: 'KeePass', extended: false}))]})), Prototype (__kwargtrans__ ({regex: re.compile ('^\\$odf\\$\\*1\\*1\\*100000\\*32\\*[a-f0-9]{64}\\*16\\*[a-f0-9]{32}\\*16\\*[a-f0-9]{32}\\*0\\*[a-f0-9]{2048}$', re.IGNORECASE), modes: [HashInfo (__kwargtrans__ ({py_name: 'Open Document Format (ODF) 1.2 (SHA-256, AES)', hashcat: 18400, john: null, extended: false}))]}))];

//# sourceMappingURL=hashes.map